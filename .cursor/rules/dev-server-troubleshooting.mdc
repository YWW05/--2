---
description:
globs:
alwaysApply: false
---
# 开发服务器故障排除指南

## 常见问题

### 1. 无法访问开发服务器

如果遇到"无法访问此页面"的错误，请检查：

1. **端口占用**：
   - 检查默认端口(3000)是否被占用
   - 使用 `netstat -ano | findstr 3000` 查看端口占用
   - 如果端口被占用，可以在 `vite.config.ts` 中修改端口：
   ```ts
   server: {
     port: 3001, // 或其他可用端口
   }
   ```

2. **主机配置**：
   - 不要直接使用 `localhost`，而是使用以下方式之一：
     - `127.0.0.1:端口号`
     - 本机实际IP地址:端口号
   - 确保 vite.config.ts 中有正确的主机配置：
   ```ts
   server: {
     host: true, // 或 '0.0.0.0'
     cors: true
   }
   ```

3. **开发环境检查**：
   - 确保所有依赖已正确安装：`npm install`
   - 检查 package.json 中的依赖版本兼容性
   - 确保 Node.js 版本 >= 14.0.0

### 2. WebSocket 连接问题

如果 WebSocket 连接失败：

1. **端口检查**：
   - 确保 TouchDesigner WebSocket 服务器端口(7000)未被占用
   - 检查防火墙是否允许该端口的通信

2. **连接配置**：
   - 检查 WebSocket 服务器地址配置是否正确
   - 确保 CORS 设置正确

## 快速解决方案

1. 重启开发服务器：
   ```bash
   # 1. 停止当前服务器
   Ctrl + C
   
   # 2. 清理端口
   taskkill /F /IM node.exe
   
   # 3. 重新启动
   npm run dev
   ```

2. 使用备用端口：
   - 修改 vite.config.ts 中的端口配置
   - 使用环境变量：`PORT=3001 npm run dev`

3. 网络连接：
   - 尝试使用不同的网络接口
   - 检查系统防火墙设置
   - 确保开发服务器和客户端在同一网络下

## 预防措施

1. 开发环境设置：
   - 使用 .env 文件管理环境变量
   - 在 package.json 中锁定依赖版本
   - 定期更新依赖包

2. 网络配置：
   - 配置固定的开发端口
   - 设置 CORS 白名单
   - 使用环境变量管理 WebSocket 配置

3. 错误处理：
   - 添加详细的错误日志
   - 实现自动重连机制
   - 提供用户友好的错误提示
